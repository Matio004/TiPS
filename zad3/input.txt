ąęśćżźół            encoded = encode(text, dictionary)

            # sending
            message = {
                'code_dict': dictionary,
                'data': encoded
            }


            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.connect((address, port))
                s.sendall(json.dumps(message).encode('utf-8'))
        case 1:
            port = int(input('Nasłuchuj na porcie: '))
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.bind(('0.0.0.0', port))
                s.listen()
                conn, addr = s.accept()
                with conn:
                    print(f"Połączono z: {addr}")
                    data = conn.recv(65536)
                    msg = json.loads(data.decode('utf-8'))

                    decoded = decode(msg['data'], msg['code_dict'])
                    print('Odebrany tekst:', decoded, sep='\n')
                    with open("odebrany_plik.txt", "w", encoding="utf-8") as f:
                        f.write(decoded)

                    print("Plik został zapisany jako 'odebrany_plik.txt'")
ChatGPT powiedział:

Błąd, który widzisz:

json.decoder.JSONDecodeError: Unterminated string starting at: line 1 column 1205 (char 1204)

oznacza, że odebrany JSON jest niekompletny lub uszkodzony — w szczególności wygląda, jakby wysłany JSON nie został w całości odebrany przez recv.
Problem

conn.recv(65536) odbiera tylko jedną porcję danych — ale w TCP nie masz gwarancji, że cały JSON zostanie odebrany w jednym wywołaniu recv. Nawet jeśli sendall() po stronie nadawcy wysyła cały tekst na raz, odbiorca może dostać to w fragmentach.
Rozwiązanie

Musisz zaimplementować mechanizm odbioru danych w pętli — aż wszystkie dane zostaną odebrane. Można to zrobić na dwa sposoby:
Opcja 1: Odbieranie do zamknięcia połączenia (prosta, skuteczna)

Zmieniamy kod odbiorcy:

data = b''
while True:
    packet = conn.recv(4096)
    if not packet:
        break
    data += packet
msg = json.loads(data.decode('utf-8'))

Opcja 2: Dodanie długości wiadomości (bardziej niezawodne)

Jeśli chcesz mieć pełną kontrolę, możesz najpierw wysłać długość wiadomości jako nagłówek, potem dane. Ale opcja 1 będzie wystarczająca dla prostych zastosowań lokalnych.